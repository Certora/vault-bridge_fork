{
    //"assert_autofinder_success": true,
    "contract_recursion_limit": "1",
    "disable_auto_cache_key_gen": true,
    "files": [
        "certora/harnesses/StorageExtension.sol",
        //"certora/mocks/IUSDTMock.sol",
        //"certora/mocks/PermitMock.sol",
        "certora/mocks/TokenMock.sol",
        "src/vault-bridge-tokens/GenericVaultBridgeToken.sol",
        //"src/MigrationManager.sol",
        //"src/VaultBridgeTokenInitializer.sol",
        "src/VaultBridgeTokenPart2.sol",
        "test/etc/TestVault.sol",
        //"zkevm-contracts/contracts/v2/sovereignChains/BridgeL2SovereignChain.sol",
        //"zkevm-contracts/contracts/v2/lib/BytecodeStorer.sol",
        //"zkevm-contracts/contracts/v2/PolygonZkEVMGlobalExitRootV2.sol",
    ],
    "server": "production",
    "global_timeout": "7200",
    "loop_iter": "2",
    "link": [
        "BridgeL2SovereignChain:wrappedTokenBytecodeStorer=BytecodeStorer",
        "BridgeL2SovereignChain:globalExitRootManager=PolygonZkEVMGlobalExitRootV2",
        "TestVault:asset=TokenMock",
    ],
    "loop_iter": "6",
    "msg": "GenericVaultBridgeToken",
    "mutations": {
        "gambit": [
            {
                "filename": "src/vault-bridge-tokens/GenericVaultBridgeToken.sol",
                "num_mutants": 5
            }
        ]
    },
    "optimistic_contract_recursion": true,
    "optimistic_hashing": true,
    "optimistic_loop": true,
    "optimistic_summary_recursion": true,
    "packages": [
        "@types/bun=node_modules/@types/bun",
        "@0xpolygonhermez/zkevm-commonjs=node_modules/@0xpolygonhermez/zkevm-commonjs",
        "@openzeppelin-contracts-upgradeable=dependencies/@openzeppelin-contracts-upgradeable-5.1.0",
        "@openzeppelin-contracts=dependencies/@openzeppelin-contracts-5.1.0",
        "@openzeppelin/contracts=dependencies/@openzeppelin-contracts-5.1.0",
        "forge-std=dependencies/forge-std-1.9.4/src",
        // for zkmevm-contracts
        "@openzeppelin/contracts-upgradeable4=zkevm-contracts/node_modules/@openzeppelin/contracts-upgradeable4",
        "@openzeppelin/contracts-upgradeable5=zkevm-contracts/node_modules/@openzeppelin/contracts-upgradeable5",
        "@zkmcontractsv2=zkevm-contracts/contracts/v2",
    ],
    "process": "emv",
    "smt_timeout": "7200",
    "prover_args": [
        "-maxDecompiledCommandCount 5000000",
        "-maxBlockCount 500000",
    ],
    //"rule_sanity": "basic",
    "solc_map": {
        "StorageExtension": "solc8.29",
        "GenericVaultBridgeToken": "solc8.29",
        "MigrationManager": "solc8.29",
        "VaultBridgeTokenInitializer": "solc8.29",
        "VaultBridgeTokenPart2": "solc8.29",
        "TestVault": "solc8.29",
        "TokenMock": "solc8.28",
        "BridgeL2SovereignChain": "solc8.28",
        "BytecodeStorer": "solc8.28",
        "PolygonZkEVMGlobalExitRootV2": "solc8.28",
    },
    "solc_optimize": "200",
    "solc_via_ir": true,
    "storage_extension_harnesses": [
        "GenericVaultBridgeToken=StorageExtension",
        //"MigrationManager=StorageExtension",
    ],
    "struct_link": [
        "GenericVaultBridgeToken:underlyingToken=TokenMock",
        "GenericVaultBridgeToken:yieldVault=TestVault",
        //"GenericVaultBridgeToken:lxlyBridge=BridgeL2SovereignChain",
        //"GenericVaultBridgeToken:migrationManager=MigrationManager",
        "GenericVaultBridgeToken:_vaultBridgeTokenPart2=VaultBridgeTokenPart2",
        //"MigrationManager:lxlyBridge=BridgeL2SovereignChain",
    ],
    "summary_recursion_limit": "1",
    "verify": "GenericVaultBridgeToken:certora/specs/setup/sanity_GenericVaultBridgeToken.spec"
}
